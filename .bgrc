#!/bin/bash
# bgbashrc
# https://github.com/benvaljean/bgrc
#
# Caution: Manual changes are lost when upgrading

# This should be in .bashrc but just in case - if not running interactively, don't do anything
[ -z "$PS1" ] && return

# Another way to test if running interactively
#[[ "$-" != *i* ]] && return

bgrc() {
	echo bgrc 2.28 2019-11-14
	[[ -a ~/.bgrc ]] && echo bgbashrc installed
	grep bgvimrc ~/.vimrc >/dev/null 2>&1 && echo bgvimrc installed
	grep bgscreenrc ~/.screenrc >/dev/null 2>&1 && echo bgscreenrc installed
	[[ -a ~/bin/deploy_bgrc ]] && echo deploy_bgrc installed
}

#Source bgrc.cfg
[[ -r ${HOME}/.bgrc.cfg ]] && . ${HOME}/.bgrc.cfg

#Set psql to use less by default
export PAGER=less

#Set default editor to vim if not already set
[[ -z $EDITOR ]] && whiched=$(which vim 2>/dev/null) && export EDITOR=$whiched

#Do not try to set window title if $TERM is not set as it is probably console and the prompt will look ugly
case "$TERM" in
	screen*|xterm*|rxvt*|Eterm*|kterm*|dtterm*|ansi*|cygwin*)
		PS1='\[\033]0;\h\007\][\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]]\$ '
	;;
	*)
		PS1='[\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]]\$ '
	;;
esac

#Allow autocd (cd dir by just typing it) but do not error if the current version of bash does not support it
shopt -s autocd 2>/dev/null && printf a
#Check the size of the terminal window size after each command and, if necessary, updates the values of LINES and COLUMNS
shopt -s checkwinsize

#Never overwrite bash history - avoid 'loser takes all.'
shopt -s histappend

#Large history; add time and ignore commands that begin with space or are a duplicate
export HISTSIZE=20000
export HISTFILESIZE=20000
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT='%F %T '

#Ignore frequently used commands
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls'

#Allow multi-line commands to be saved in history
shopt -s cmdhist
shopt -s lithist

#Per-session bash history and write it upon every command so it is never lost
history_session_dir=${history_session_dir-${HOME}/.bash_history_sessions}
history_session_file=$(date "+%Y-%m-%d-%H.%M.%S")
mkdir -p $history_session_dir

add_last_command() { 
    history -a ${history_session_dir}/${history_session_file}
    #history 1| awk '{ $1=""; print $0 }' >> ${history_session_dir}/${history_session_file}
}
#Add to $PROMPT_COMMAND whilst preserving existing, if any
[[ $PROMPT_COMMAND == "add_last_command" ]] || PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}'add_last_command'

#Manually process history files, this prevents moving individually into $HISTFILE temporarily and allows history-global-grep
process-history() {
   rawhistory=$1
   paste -sd '#\n' $rawhistory|gawk -F"#" '{d=$2 ; $2="";print strftime("%Y-%m-%d %T",d)" "$0}'|sort -k1,1|egrep -v '(hgg|hcg|hg|history)'
}
history-current-session() { 
    process-history ${history_session_dir}/${history_session_file}
}
alias hc=history-current-session
history-current-grep() {
    history-current-session | grep "$@"
}
alias hcg=history-current-grep

#Search entire session history
history-global-grep() {
    local tempfile=$(mktemp ~/.hgg.XXX)
    find ${history_session_dir} -type f -name '20*' |xargs grep -hr -B1 "$@"|sed '/^--$/d' >$tempfile
    process-history $tempfile
    rm $tempfile
}
alias hgg=history-global-grep
history-global-grep-recent() {
    history-global-grep "$@" | tail -20
}
alias hggr=history-global-grep-recent


#Add to PATH
export PATH="$PATH:~/bin:/sbin:/usr/sbin:/usr/local/bin";

#Extended info displayed by default
export LESS="-M"

#Long ISO 8601 dates
export TIME_STYLE=long-iso

platform='unknown'
flavour='unknown'
unamestr=$(uname)
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
    [[ -f /etc/redhat-release ]] && flavour='enterprise'
    [[ -f /etc/debian_version ]] && flavour='debian'
elif [[ "$unamestr" == 'FreeBSD' ]] || [[ "$unamestr" == 'Darwin' ]] ; then
    platform='freebsd'
elif [[ "$unamestr" == 'SunOS' ]]; then
   platform='SunOS'
fi

bginfo() {
    if [[ "$unamestr" == 'SunOS' ]]; then
        #TODO Add Solaris support for mem/CPU and use smbios instead of dmidecode
        echo Not implemented
    else
        #Check if dmidecode is present and can run sudo
        #Gracefully continue if sudo not available
        if [[ -x /usr/sbin/dmidecode ]] && sudo -vn 2>/dev/null ; then
            local dmidecode='/usr/sbin/dmidecode'
            local dmidecodestrings='system-manufacturer system-product-name system-serial-number'
            declare -a dmidecodedata
            for i in $dmidecodestrings
            do
                dmidecodedata+=$(sudo $dmidecode -s $i; printf " ")
            done
            echo ${dmidecodedata[*]}
        fi
        #Repeat some logic here as we expect bginfo to run separately
        unamestr=$(uname)
        if [[ "$unamestr" == 'Linux' ]]; then
            physRAMGb=$(command free -g|grep Mem|awk '{print $2}')
            logicalcpucores=$(cat /proc/cpuinfo|grep -c processor)
            physicalcpucores=$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)
        elif [[ "$unamestr" == 'FreeBSD' ]] || [[ "$unamestr" == 'Darwin' ]] ; then
            physRAMGb=$(($(sysctl hw.memsize|cut -d' ' -f2)/1024/1024/1024))
            logicalcpucores=$(sysctl hw.logicalcpu|cut -d' ' -f2)
            physicalcpucores=$(sysctl hw.physicalcpu|cut -d' ' -f2)
        fi
        if [[ -z $logicalcpucores ]]; then
        	echo Not available 
        else
        	echo $logicalcpucores logical cores on $physicalcpucores physical cores, ${physRAMGb}Gb RAM
        fi
    fi
}

if [[ "$platform" == 'linux' ]] || [[ "$platform" == 'freebsd' ]]; then
	alias grep='grep --color'                     # show differences in colour when supported
	alias egrep='egrep --color=auto'             
	alias fgrep='fgrep --color=auto'              
fi

# Some shortcuts for different directory listings
[[ "$platform" == 'linux' ]] && alias ls='ls -hF --color=tty'                 # classify files in colour when supported
[[ "$platform" == 'freebsd' ]] && alias ls='ls -HGf'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'

#Shortcut for ssh client config whilst ensuring syntax highlighting is always used
alias sshconf='vim -c ":setf sshconfig" ~/.ssh/config'

#bgssh-add - auto complete for keys in $defaultsshkeydir
defaultsshkeydir=${defaultsshkeydir-${HOME}/.ssh}
mkdir -p $defaultsshkeydir
keys=$(ls $defaultsshkeydir)
function _sshaddcomplete() {
	IFS=$'\n' tmp=( $(compgen -W "${keys}" -- "${COMP_WORDS[$COMP_CWORD]}" ))
	COMPREPLY=( "${tmp[@]// /\ }" )
}
complete -o default -F _sshaddcomplete bgssh-add

bgssh-add() {
	if [[ "bg" == "bg$1" ]] ; then 
	  ssh-add -l
	  return
	fi
	ssh-add ${defaultsshkeydir}/$1
}

#Ensure environment is maintained with sudo vim to allow vim plugins to work
alias sv='sudo -E vim'

#Quick pass generation
alias genpass='LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | tr -d Il1 | head -c 32'

#Generate random words
#Using modulus to determine range is not completely random
#http://stackoverflow.com/questions/1194882/generate-random-number#comment36748687_1195035
genwords() {
    genwordscount=${genwordscount-5}
    if [[ ! $genwordscount =~ ^[0-9]+$ ]]; then
        echo Error: \$genwordscount is not a positive integer! >&2
        return
    fi
    for i in $(seq 1 ${genwordscount}); do 
        dict=${dict-/usr/share/dict/words}
        lines=$(wc -l $dict|prow 1)
        sed -n $[$RANDOM$RANDOM$RANDOM % $lines]p $dict
    done
}

#Screen attach here and now and enable logging
alias sc='screen -D -R -L'
#Or create a new session anyway
alias scnew='screen -L'

#du improvements, useful for finding large dirs, show sorted output afterwards to give indication of progress
bgdu() {
    local tempfile=$(mktemp ~/.bgdu.XXX)
    sudo du -xsch .[!.]* * | tee $tempfile
    echo ======== As above but sorted ========
    cat $tempfile | sort -h
    rm $tempfile
}

#Show swap usage 
bgswap() {
if [[ $platform == "linux" ]]; then
    for proc in /proc/*
        do cat $proc/smaps 2>/dev/null | awk '/Swap/{swap+=$2}END{print swap "\t'`echo $proc`'\t'`readlink $proc/exe|awk '{print $1}' `'" }'
    done | sort -n | awk '{total+=$1}/[0-9]/;END{print total "\tTotal (kB)"}'
else
    echo Not Implemented
fi
}

#Command shortcuts
alias wgets="wget --no-check-certificate"
alias curls="curl -k"
alias l="less"
alias v="vim"
alias s="ssh"
alias ggg="git commit -v -a"
alias gggg="git commit -v -a -m iiiiii"

#A screenful of head
alias hds='head -n $((${LINES} - 4))'

#grep recursively in all files
grepr() {
	grep -r "$@" *
}

#When invoking openssl on a cert it is usually for this
alias bgssl='openssl x509 -subject -issuer -dates -noout -in'

#ssh auto complete
#on ssh client config
if [ -r ~/.ssh/config ]; then	
		ssh_autocomplete_word_list=$(cat ~/.ssh/config|awk '{if ($1 == "Host") print $2}'|egrep  "^[0-9a-zA-Z]"|grep -v '*')
fi
#on ssh known hosts
for file in ~/.ssh/known_hosts /etc/ssh/ssh_known_hosts ; do
	if [ -r $file ]; then
		ssh_autocomplete_word_list="$ssh_autocomplete_word_list $(awk -F'[ ,:]' '/^[0-9a-zA-Z]/ {sub(/\[/,"",$1) ; sub(/\]/,"",$1) ; print $1}' $file)"
	fi
done

[[ -n $ssh_autocomplete_word_list ]] && complete -W "$ssh_autocomplete_word_list" ssh scp deploy_bgrc sftp

#grep through history shortcut
hg() {
	history | grep "$@"
}

page() {
	#page for long output
	tempfile=$(mktemp ~/.pager.XXX)
	"$@" >"${tempfile}"
	if (( $(awk 'END {print NR}' "${tempfile}") >= 25 )); then
		$PAGER "$tempfile"
	else
		cat "$tempfile"
	fi
	rm "$tempfile"
}

#Fix Bug in vim 7.0.237 and possibly later. Not seen in 7.4
#https://github.com/tpope/vim-pathogen/issues/118
export VIMBLACKLIST="blah12345"

#Start vim without plugins but still use nc
alias vimsafe='vim -N -u NONE -U NONE'

#Pipe to this to show a particular row
prow() {
	awk '{print $'"$1"'}'
}

bglvm(){
    sudo pvdisplay -C
    sudo vgdisplay -C
    sudo lvdisplay -C
}

#Post-login icons

#chef managed host
which chef-client &>/dev/null && printf c

#user has active or detached screens running
[[ -x $(which screen) ]] && command screen -ls|egrep 'There (is a|are) screens? on' &>/dev/null && printf s

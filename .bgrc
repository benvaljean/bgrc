#!/bin/bash
# bgbashrc
# https://github.com/benvaljean/bgrc
#
# Caution: Manual changes are lost when upgrading

# This should be in .bashrc but just in case - if not running interactively, don't do anything
[ -z "$PS1" ] && return

# Another way to test if running interactively
#[[ "$-" != *i* ]] && return

bgrc() {
	echo bgrc 2.23.0 2018-04-13
	[[ -a ~/.bgrc ]] && echo bgbashrc installed
	grep bgvimrc ~/.vimrc >/dev/null 2>&1 && echo bgvimrc installed
	grep bgscreenrc ~/.screenrc >/dev/null 2>&1 && echo bgscreenrc installed
	[[ -a ~/bin/deploy_bgrc ]] && echo deploy_bgrc installed
}

#Source bgrc.cfg
[[ -r ${HOME}/.bgrc.cfg ]] && . ${HOME}/.bgrc.cfg

#Set psql to use less by default
export PAGER=less

#Set default editor to vim if not already set
[[ -z $EDITOR ]] && whiched=$(which vim 2>/dev/null) && export EDITOR=$whiched

#Check if git installed
GIT_INSTALLED=0
git --version &>/dev/null && GIT_INSTALLED=1

#Do not try to set window title if $TERM is not set as it is probably console and the prompt will look ugly
case "$TERM" in
	screen*|xterm*|rxvt*|Eterm*|kterm*|dtterm*|ansi*|cygwin*)
		PS1='\[\033]0;\h\007\][\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]]\$ '
	;;
	*)
		PS1='[\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]]\$ '
	;;
esac

#Consider using this for git prompt in future release
#https://github.com/git/git/blob/8976500cbbb13270398d3b3e07a17b8cc7bff43f/contrib/completion/git-prompt.sh

#Allow autocd (cd dir by just typing it) but do not error if the current version of bash does not support it
shopt -s autocd 2>/dev/null && printf a
#Check the size of the terminal window size after each command and, if necessary, updates the values of LINES and COLUMNS
shopt -s checkwinsize

#Never overwrite bash history - avoid 'loser takes all.'
shopt -s histappend

#Large history; add time and ignore commands that begin with space or are a duplicate
export HISTSIZE=20000
export HISTFILESIZE=20000
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT='%F %T '

#Ignore frequently used commands
export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls'

export PATH="$PATH:~/bin:/sbin:/usr/sbin";

#Extended info displayed by default
export LESS="-M"

#Long ISO 8601 dates
export TIME_STYLE=long-iso

platform='unknown'
flavour='unknown'
unamestr=$(uname)
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
    physRAMGb=$(command free -g|grep Mem|awk '{print $2}')
    logicalcpucores=$(cat /proc/cpuinfo|grep -c processor)
    physicalcpucores=$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)
	[[ -f /etc/redhat-release ]] && flavour='enterprise'
	[[ -f /etc/debian_version ]] && flavour='debian'
elif [[ "$unamestr" == 'FreeBSD' ]] || [[ "$unamestr" == 'Darwin' ]] ; then
    platform='freebsd'
    physRAMGb=$(($(sysctl hw.memsize|cut -d' ' -f2)/1024/1024/1024))
    logicalcpucores=$(sysctl hw.logicalcpu|cut -d' ' -f2)
    physicalcpucores=$(sysctl hw.physicalcpu|cut -d' ' -f2)
elif [[ "$unamestr" == 'SunOS' ]]; then
   platform='SunOS'
fi

bginfo() {
    if [[ "$unamestr" == 'SunOS' ]]; then
        #TODO Add Solaris support for mem/CPU and use smbios instead of dmidecode
        echo Not implemented
    else
        if [[ -x /usr/sbin/dmidecode ]]; then
            local dmidecode='/usr/sbin/dmidecode'
            local dmidecodestrings='system-manufacturer system-product-name system-serial-number'
            declare -a dmidecodedata
            for i in $dmidecodestrings
            do
                dmidecodedata+=$(sudo $dmidecode -s $i; printf " ")
            done
            echo ${dmidecodedata[*]}
        fi
        if [[ -z $logicalcpucores ]]; then
        	echo Not available 
        else
        	echo $logicalcpucores logical cores on $physicalcpucores physical cores, ${physRAMGb}Gb RAM
        fi
    fi
}

if [[ "$platform" == 'linux' ]] || [[ "$platform" == 'freebsd' ]]; then
	alias grep='grep --color'                     # show differences in colour when supported
	alias egrep='egrep --color=auto'             
	alias fgrep='fgrep --color=auto'              
fi

# Some shortcuts for different directory listings
[[ "$platform" == 'linux' ]] && alias ls='ls -hF --color=tty'                 # classify files in colour when supported
[[ "$platform" == 'freebsd' ]] && alias ls='ls -HGf'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'

#Shortcut for ssh client config whilst ensuring syntax highlighting is always used
alias sshconf='vim -c ":setf sshconfig" ~/.ssh/config'

#bgssh-add - auto complete for keys in $defaultsshkeydir
defaultsshkeydir=${defaultsshkeydir-${HOME}/.ssh}
keys=$(ls $defaultsshkeydir)
function _sshaddcomplete() {
	IFS=$'\n' tmp=( $(compgen -W "$(ls $defaultsshkeydir)" -- "${COMP_WORDS[$COMP_CWORD]}" ))
	COMPREPLY=( "${tmp[@]// /\ }" )
}
complete -o default -F _sshaddcomplete bgssh-add

bgssh-add() {
	ssh-add ${defaultsshkeydir}/$1
}

#Ensure environment is maintained with sudo vim to allow vim plugins to work
alias sv='sudo -E vim'

#Screen attach here and now and enable logging
alias sc='screen -D -R -L'
#Or create a new session anyway
alias scnew='screen -L'

#du alias useful for finding large dirs
alias bgdu='sudo du -xsch *'

#Command shortcuts
alias sshl="ssh-add -l"
alias wgets="wget --no-check-certificate"
alias curls="curl -k"
alias l="less"
alias v="vim"
alias s="ssh"

#A screenful of head
alias hds='head -n $((${LINES} - 4))'

#grep recursively in all files
grepr() {
	grep -r "$@" *
}

#ssh auto complete
#on ssh client config
if [ -r ~/.ssh/config ]; then	
		ssh_autocomplete_word_list=$(cat ~/.ssh/config|awk '{if ($1 == "Host") print $2}'|egrep  "^[0-9a-zA-Z]"|grep -v '*')
fi
#on ssh known hosts
for file in ~/.ssh/known_hosts /etc/ssh/ssh_known_hosts ; do
	if [ -r $file ]; then
		ssh_autocomplete_word_list="$ssh_autocomplete_word_list $(awk -F'[ ,:]' '/^[0-9a-zA-Z]/ {sub(/\[/,"",$1) ; sub(/\]/,"",$1) ; print $1}' $file)"
	fi
done

[[ -n $ssh_autocomplete_word_list ]] && complete -W "$ssh_autocomplete_word_list" ssh scp deploy_bgrc sftp

#git improvements
if [[ $GIT_INSTALLED == "1" ]]; then
	#simple git auto complete (tested with 2.3.2)
	#consider git-completion if you would would like something more advanced
	git_autocomplete_word_list="add bisect checkout clone commit diff fetch grep init log merge mv pull push rebase reset rm show status tag"
	function _gitcomplete()
	{
    	case $COMP_CWORD in
        	1) COMPREPLY=($(compgen -W "$git_autocomplete_word_list" -- ${COMP_WORDS[COMP_CWORD]}));;
        	*) COMPREPLY=($(compgen -f -- "${COMP_WORDS[COMP_CWORD]}" ));;
    	esac
	}
	complete -F _gitcomplete git

	#use vim as default pager with ansi escape sequences, if not already set by user
	grep "pager =" ${HOME}/.gitconfig &>/dev/null || git config --global core.pager "vim -c '%sm/\\e.\\{-}m//ge' -c 'set ft=diff' -c 'normal gg' -"
fi

#grep through history shortcut
hg() {
	history | grep "$@"
}

page() {
	#page for long output
	tempfile=$(mktemp ~/.pager.XXX)
	"$@" >"${tempfile}"
	if (( $(awk 'END {print NR}' "${tempfile}") >= 25 )); then
		$PAGER "$tempfile"
	else
		cat "$tempfile"
	fi
	rm "$tempfile"
}

#Fix Bug in vim 7.0.237 and possibly later. Not seen in 7.4
#https://github.com/tpope/vim-pathogen/issues/118
export VIMBLACKLIST="blah12345"

#Start vim without plugins but still use nc
alias vimsafe='vim -N -u NONE -U NONE'

#Pipe to this to show a particular row
prow() {
	awk '{print $'"$1"'}'
}

bglvm(){
    sudo pvdisplay -C
    sudo vgdisplay -C
    sudo lvdisplay -C
}

#Post-login icons

#chef managed host
which chef-client &>/dev/null && printf c

#user has active or detached screens running
#broken need to use -C if available on only $USER
pgrep -U $USER screen &>/dev/null && printf s
